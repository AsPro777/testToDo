{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\a.prokudina\\\\Desktop\\\\repos\\\\testnumedy\\\\testnumedy\\\\src\\\\NewTask.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addTask, editableTask } from './app/taskSlice';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css';\nimport { useParams } from \"react-router-dom\";\nimport { selectTask } from './app/taskSlice';\n\n/*страница добавления новой задачи */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction NewTask(props) {\n  _s();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [startTaskDate, setStartTaskDate] = useState(paramFromApp.param == 'new' ? startTaskDate : new Date(task[Number(paramFromApp.param)].fromDate));\n  const [endTaskDate, setEndTaskDate] = useState(paramFromApp.param == 'new' ? endTaskDate : new Date(task[Number(paramFromApp.param)].endDate));\n  const [isDo, setIsDo] = useState(paramFromApp.param == 'new' ? false : task[Number(paramFromApp.param)].isDo);\n  const task = useSelector(selectTask);\n\n  /*Переход на страницу Список задач по клику */\n  function goToApp() {\n    navigate(-1);\n  }\n  function sendObj() {\n    let textHead = document.getElementById('taskHeader').value;\n    let textBody = document.getElementById('taskText').value;\n    const objTask = {\n      'header': textHead,\n      'text': textBody,\n      'fromDate': startTaskDate,\n      'endDate': endTaskDate,\n      'isDo': isDo\n    };\n    return objTask;\n  }\n\n  /*добавление новой задачи */\n  function addNewTask() {\n    /*let textHead=document.getElementById('taskHeader').value;\r\n    let textBody=document.getElementById('taskText').value;\r\n    \r\n    const objNewTask = {\r\n     'header':textHead,\r\n     'text': textBody,\r\n     'fromDate': startTaskDate,\r\n     'endDate': endTaskDate,\r\n     'isDo': false\r\n    }*/\n\n    let objNewTask = sendObj();\n    dispatch(addTask(objNewTask));\n    alert('Задача добавлена');\n  }\n  function editExistTask() {\n    /*let textHead=document.getElementById('taskHeader').value;\r\n    let textBody=document.getElementById('taskText').value;\r\n    \n    const objNewTask = {\r\n    'header':textHead,\r\n    'text': textBody,\r\n    'fromDate': startTaskDate,\r\n    'endDate': endTaskDate,\r\n    'isDo': (paramFromApp.param == 'new') ? false : task[Number(paramFromApp.param)].isDo\r\n    }*/\n\n    let objEditTask = sendObj();\n    dispatch(addTask(objEditTask));\n    alert('Задача добавлена');\n  }\n  let paramFromApp = useParams(); /*номер задачи для редактирования */\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mainDiv\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"goToButton marginNewTask\",\n          onClick: goToApp,\n          children: \"\\u041D\\u0430\\u0437\\u0430\\u0434 \\u043A \\u0441\\u043F\\u0438\\u0441\\u043A\\u0443 \\u0437\\u0430\\u0434\\u0430\\u0447\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"taskHeader\",\n          className: \"TitleTaskTextarea marginNewTask\",\n          placeholder: \"\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438\",\n          children: paramFromApp.param == 'new' ? '' : task[Number(paramFromApp.param)].header\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          id: \"taskText\",\n          className: \"TextTaskTextarea marginNewTask\",\n          placeholder: \"\\u0422\\u0435\\u043A\\u0441\\u0442 \\u0417\\u0430\\u0434\\u0430\\u0447\\u0438\",\n          children: paramFromApp.param == 'new' ? '' : task[Number(paramFromApp.param)].text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dateDiv addNewTask\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"taskDate\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u041D\\u0430\\u0447\\u0430\\u043B\\u043E \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: startTaskDate,\n              onChange: date => setStartTaskDate(date)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"taskDate\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u041E\\u043A\\u043E\\u043D\\u0447\\u0430\\u043D\\u0438\\u0435 \\u0437\\u0430\\u0434\\u0430\\u0447\\u0438\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n              selected: endTaskDate,\n              onChange: date => setEndTaskDate(date)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"addNewTask\",\n          onClick: paramFromApp.param == 'new' ? addNewTask : editExistTask,\n          children: \"\\u0414\\u043E\\u0431\\u0430\\u0432\\u0438\\u0442\\u044C/\\u0418\\u0437\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 7\n  }, this);\n}\n_s(NewTask, \"fbOad0cC03PGx3nMVS6zK4NY52w=\", false, function () {\n  return [useNavigate, useDispatch, useSelector, useParams];\n});\n_c = NewTask;\nexport default NewTask;\nvar _c;\n$RefreshReg$(_c, \"NewTask\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useSelector","useDispatch","addTask","editableTask","DatePicker","useParams","selectTask","NewTask","props","navigate","dispatch","startTaskDate","setStartTaskDate","paramFromApp","param","Date","task","Number","fromDate","endTaskDate","setEndTaskDate","endDate","isDo","setIsDo","goToApp","sendObj","textHead","document","getElementById","value","textBody","objTask","addNewTask","objNewTask","alert","editExistTask","objEditTask","header","text","date"],"sources":["C:/Users/a.prokudina/Desktop/repos/testnumedy/testnumedy/src/NewTask.js"],"sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {  addTask,editableTask} from './app/taskSlice';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { selectTask } from './app/taskSlice';\r\n\r\n/*страница добавления новой задачи */\r\nfunction NewTask(props) {\r\n\r\n  const navigate = useNavigate();\r\n  const dispatch=useDispatch();\r\n  \r\n\r\n  const [startTaskDate, setStartTaskDate] = useState((paramFromApp.param == 'new') ? startTaskDate : new Date(task[Number(paramFromApp.param)].fromDate));\r\n  const [endTaskDate, setEndTaskDate] = useState((paramFromApp.param == 'new') ? endTaskDate : new Date(task[Number(paramFromApp.param)].endDate));\r\n  const [isDo , setIsDo] = useState((paramFromApp.param == 'new') ? false : task[Number(paramFromApp.param)].isDo);\r\n  const task = useSelector(selectTask);\r\n\r\n   /*Переход на страницу Список задач по клику */\r\n  function goToApp(){\r\n    navigate(-1)\r\n  }\r\n\r\n  function sendObj(){\r\n    let textHead=document.getElementById('taskHeader').value;\r\n    let textBody=document.getElementById('taskText').value;\r\n\r\n    const objTask = {\r\n      'header':textHead,\r\n      'text': textBody,\r\n      'fromDate': startTaskDate,\r\n      'endDate': endTaskDate,\r\n      'isDo': isDo\r\n    }\r\n\r\n    return objTask;\r\n  }\r\n  \r\n  /*добавление новой задачи */\r\n  function addNewTask() {\r\n     /*let textHead=document.getElementById('taskHeader').value;\r\n     let textBody=document.getElementById('taskText').value;\r\n     \r\n     const objNewTask = {\r\n      'header':textHead,\r\n      'text': textBody,\r\n      'fromDate': startTaskDate,\r\n      'endDate': endTaskDate,\r\n      'isDo': false\r\n     }*/\r\n\r\n     let objNewTask=sendObj();\r\n     dispatch(addTask(objNewTask));\r\n     alert('Задача добавлена');\r\n\r\n    }\r\n\r\n    function editExistTask() {\r\n      /*let textHead=document.getElementById('taskHeader').value;\r\n      let textBody=document.getElementById('taskText').value;\r\n     \r\n     const objNewTask = {\r\n      'header':textHead,\r\n      'text': textBody,\r\n      'fromDate': startTaskDate,\r\n      'endDate': endTaskDate,\r\n      'isDo': (paramFromApp.param == 'new') ? false : task[Number(paramFromApp.param)].isDo\r\n     }*/\r\n\r\n     let objEditTask=sendObj(); \r\n     dispatch(addTask(objEditTask));\r\n     alert('Задача добавлена');\r\n    }\r\n\r\n    let paramFromApp = useParams();/*номер задачи для редактирования */ \r\n\r\n    return (\r\n      <div className=\"App\">\r\n      <header className=\"App-header\">\r\n       <div className='mainDiv'>\r\n        <button className='goToButton marginNewTask' onClick={goToApp}>Назад к списку задач</button>\r\n        <textarea id='taskHeader' className='TitleTaskTextarea marginNewTask' placeholder='Название задачи'>{(paramFromApp.param == 'new') ? '' : task[Number(paramFromApp.param)].header}</textarea>\r\n        <textarea id='taskText' className='TextTaskTextarea marginNewTask' placeholder='Текст Задачи'>{(paramFromApp.param == 'new') ? '' : task[Number(paramFromApp.param)].text}</textarea>\r\n        <div className='dateDiv addNewTask'>\r\n          <div className='taskDate'>\r\n            <span>Начало задачи</span>\r\n            <DatePicker selected={startTaskDate} onChange={(date) => setStartTaskDate(date)} />  \r\n          </div>\r\n          <div className='taskDate'>\r\n            <span>Окончание задачи</span>\r\n            <DatePicker selected={endTaskDate} onChange={(date) => setEndTaskDate(date)} /> \r\n          </div>\r\n        </div>\r\n        <button className='addNewTask' onClick={(paramFromApp.param == 'new') ? addNewTask : editExistTask}>Добавить/Изменить задачу</button>\r\n       </div>\r\n      </header>\r\n    </div>\r\n    )\r\n  }\r\n  \r\n  export default NewTask;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
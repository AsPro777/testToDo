{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\a.prokudina\\\\Desktop\\\\repos\\\\testnumedy\\\\testnumedy\\\\src\\\\NewTask.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useNavigate } from \"react-router-dom\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addTask, editableTask, sortTask } from './app/taskSlice';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css';\nimport { useParams } from \"react-router-dom\";\nimport { selectTask } from './app/taskSlice';\nimport { registerLocale, setDefaultLocale } from \"react-datepicker\";\nimport ru from 'date-fns/locale/ru';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nregisterLocale('ru', ru);\n\n/*страница добавления новой задачи */\nfunction NewTask(props) {\n  _s();\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const [startTaskDate, setStartTaskDate] = useState();\n  const [endTaskDate, setEndTaskDate] = useState();\n  const [isDo, setIsDo] = useState(false);\n  const task = useSelector(selectTask);\n  const idEditedTask = useRef(0);\n  let paramFromApp = useParams(); /*номер задачи для редактирования */\n\n  useEffect(() => {\n    if (paramFromApp.param == 'new') {\n      setStartTaskDate(new Date());\n      setEndTaskDate(new Date());\n    } else {\n      task.map((value, index) => {\n        if (value.dateCreate == paramFromApp.param) idEditedTask.current = index;\n      });\n    }\n    let a = 1;\n    //setStartTaskDate(new Date(task[Number(paramFromApp.param)].fromDate)) ;\n    //(paramFromApp.param == 'new') ? setEndTaskDate(new Date()) : \n  }, []);\n\n  /*Переход на страницу Список задач по клику */\n  function goToApp() {\n    navigate(-1);\n  }\n\n  /*возвращает объект задачи для дальнейшего добавления или изменения */\n  function sendObj(param) {\n    let textHead = document.getElementById('taskHeader').value;\n    let textBody = document.getElementById('taskText').value;\n    const objTask = {\n      'dateCreate': new Date().toISOString(),\n      'header': textHead,\n      'text': textBody,\n      'fromDate': startTaskDate.toISOString(),\n      'endDate': endTaskDate.toISOString(),\n      'isDo': param == 'new' ? false : task[Number(param)].isDo\n    };\n    return objTask;\n  }\n\n  /*добавление новой задачи */\n  function addNewTask() {\n    let objNewTask = sendObj(paramFromApp.param);\n    dispatch(addTask(objNewTask));\n    alert('Задача добавлена');\n    goToApp();\n  }\n\n  /*редактирование задачи */\n  function editExistTask() {\n    let objEditTask = sendObj(paramFromApp.param);\n    const objEditTaskFull = {\n      'new': objEditTask,\n      'id': Number(paramFromApp.param)\n    };\n    dispatch(editableTask(objEditTaskFull));\n    alert('Задача изменена');\n    goToApp();\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 7\n  }, this);\n}\n_s(NewTask, \"JG8gItW1SW1DBw6gp9UsImHobH8=\", false, function () {\n  return [useNavigate, useDispatch, useSelector, useParams];\n});\n_c = NewTask;\nexport default NewTask;\nvar _c;\n$RefreshReg$(_c, \"NewTask\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","useSelector","useDispatch","addTask","editableTask","sortTask","DatePicker","useParams","selectTask","registerLocale","setDefaultLocale","ru","NewTask","props","navigate","dispatch","startTaskDate","setStartTaskDate","endTaskDate","setEndTaskDate","isDo","setIsDo","task","idEditedTask","paramFromApp","param","Date","map","value","index","dateCreate","current","a","goToApp","sendObj","textHead","document","getElementById","textBody","objTask","toISOString","Number","addNewTask","objNewTask","alert","editExistTask","objEditTask","objEditTaskFull"],"sources":["C:/Users/a.prokudina/Desktop/repos/testnumedy/testnumedy/src/NewTask.js"],"sourcesContent":["\r\nimport React, { useState, useEffect,useRef } from 'react';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {  addTask,editableTask, sortTask} from './app/taskSlice';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport 'react-datepicker/dist/react-datepicker-cssmodules.css';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { selectTask } from './app/taskSlice';\r\nimport { registerLocale, setDefaultLocale } from  \"react-datepicker\";\r\nimport ru from 'date-fns/locale/ru';\r\nregisterLocale('ru', ru);\r\n\r\n/*страница добавления новой задачи */\r\nfunction NewTask(props) {\r\n\r\n  const navigate = useNavigate();\r\n  const dispatch=useDispatch();\r\n\r\n  const [startTaskDate, setStartTaskDate] = useState();\r\n  const [endTaskDate, setEndTaskDate] = useState();\r\n  const [isDo , setIsDo] = useState(false);\r\n  const task = useSelector(selectTask);\r\n  const idEditedTask = useRef(0);\r\n\r\n  let paramFromApp = useParams();/*номер задачи для редактирования */ \r\n  \r\n\r\n  useEffect(()=>{\r\n    if (paramFromApp.param == 'new') {\r\n      setStartTaskDate(new Date());\r\n      setEndTaskDate(new Date());\r\n    }\r\n    else {\r\n      task.map((value,index)=> {\r\n         if(value.dateCreate == paramFromApp.param) idEditedTask.current=index })\r\n    }\r\n    let a=1;\r\n    //setStartTaskDate(new Date(task[Number(paramFromApp.param)].fromDate)) ;\r\n    //(paramFromApp.param == 'new') ? setEndTaskDate(new Date()) : \r\n  },[])\r\n\r\n   /*Переход на страницу Список задач по клику */\r\n  function goToApp(){\r\n    navigate(-1)\r\n  }\r\n\r\n  /*возвращает объект задачи для дальнейшего добавления или изменения */\r\n  function sendObj(param){\r\n    let textHead=document.getElementById('taskHeader').value;\r\n    let textBody=document.getElementById('taskText').value;\r\n\r\n    const objTask = {\r\n      'dateCreate':  (new Date()).toISOString(),\r\n      'header': textHead,\r\n      'text': textBody,\r\n      'fromDate': startTaskDate.toISOString(),\r\n      'endDate':  endTaskDate.toISOString(),\r\n      'isDo': (param == 'new') ? false : task[Number(param)].isDo\r\n    }\r\n\r\n    return objTask;\r\n  }\r\n  \r\n  /*добавление новой задачи */\r\n  function addNewTask() {\r\n     let objNewTask=sendObj(paramFromApp.param);\r\n     dispatch(addTask(objNewTask));\r\n     alert('Задача добавлена');\r\n     goToApp();\r\n    }\r\n\r\n    /*редактирование задачи */\r\n    function editExistTask() {\r\n     let objEditTask=sendObj(paramFromApp.param); \r\n     const objEditTaskFull = {\r\n      'new':objEditTask,\r\n      'id': Number(paramFromApp.param)\r\n    }\r\n     dispatch(editableTask(objEditTaskFull));\r\n     alert('Задача изменена');\r\n     goToApp();\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n      <header className=\"App-header\">\r\n      {/*} <div className='mainDiv'>\r\n        <button className='goToButton marginNewTask' onClick={goToApp}>Назад к списку задач</button>\r\n        <textarea id='taskHeader' className='TitleTaskTextarea marginNewTask' placeholder='Название задачи'>{(paramFromApp.param == 'new') ? '' : task[Number(paramFromApp.param)].header}</textarea>\r\n        <textarea id='taskText' className='TextTaskTextarea marginNewTask' placeholder='Текст Задачи'>{(paramFromApp.param == 'new') ? '' : task[Number(paramFromApp.param)].text}</textarea>\r\n        <div className='dateDiv addNewTask'>\r\n          <div className='taskDate'>\r\n            <span>Начало задачи</span>\r\n            <DatePicker selected={startTaskDate } \r\n                        onChange={ (date) => setStartTaskDate(date)}\r\n                        locale=\"ru\"\r\n                        dateFormat=\"d MMM yyyy\" />  \r\n          </div>\r\n          <div className='taskDate'>\r\n            <span>Окончание задачи</span>\r\n            <DatePicker selected={ endTaskDate } \r\n                        onChange={(date) => setEndTaskDate(date)}\r\n                        locale=\"ru\"\r\n                        dateFormat=\"d MMM yyyy\" />\r\n          </div>\r\n        </div>\r\n        <button className='addNewTask' onClick={(paramFromApp.param == 'new') ? addNewTask : editExistTask}>Добавить/Изменить задачу</button>\r\n    </div>*/}\r\n      </header>\r\n    </div>\r\n    )\r\n  }\r\n  \r\n  export default NewTask;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
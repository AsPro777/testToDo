{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\a.prokudina\\\\Desktop\\\\repos\\\\testnumedy\\\\testnumedy\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { editIsDo, delTask } from './app/taskSlice';\nimport { selectTask } from './app/taskSlice';\nimport './App.css';\nimport NewTask from './NewTask';\nimport { store } from './app/store';\nimport { useNavigate } from \"react-router-dom\";\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let task = useSelector(selectTask); //массив заданий из хранилища\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const [open, setOpen] = useState(false); //откр/закр окно диалога\n  const [hasMoreTask, setHasMoreTask] = useState(true); //есть ли еще стр для подгрузки при пагиниции\n  const [countPage, setCountPage] = useState(1); //номер подгруженной стр\n  const [selectParamSort, setSelectParamSort] = useState(''); //параметр для сотрировки\n\n  const delIdRef = useRef(0); //номер задания для удаления\n  const countOfTask = useRef(task.length); //всего заданий\n  const isSorted = useRef(0); //была ли сортировка\n  const sortMas = useRef([]);\n\n  //const [sortMas , setSortMas] = useState([]);//массив из всех заданий после сортировки\n  const [taskMas, setTaskMas] = useState([]); //массив заданий, отображаемый в данный момент на экране с учетом пагинации. (сперва это 6 заданий потом при прокрутке он состоит из 12 заданий и тд) \n  const [taskSortMas, setTaskSortMas] = useState([]); //массив заданий, отображаемый в данный момент на экране с учетом пагинации ПОСЛЕ сортировки. \n\n  useEffect(() => {\n    /*nextTaskMas(countPage,task)*/nextTaskMas(countPage, task, setTaskMas);\n  }, []);\n\n  /*console.log('task=');\n  console.log(task);*/\n  /*console.log('taskmas=');\n  console.log(taskMas);*/\n\n  /*console.log('sortTask=');\n  console.log(sortMas.current);\n  console.log('taskSortMas=');\n  console.log(taskSortMas);\n  console.log(hasMoreTask);*/\n\n  /*добавить в массив заданий, отображаемых на экране следующие 15 элементов. n- количество отображенных страниц */\n  function nextTaskMas(n, array, func) {\n    /*if(isSorted.current == 0) {\n      let arr=task.slice(0, 6*n);\n      setTaskMas(arr);\n    }\n    else {\n      let arr=sortMas.current.slice(0, 6*n);\n      setTaskSortMas(arr);\n    }*/\n    let arr = array.slice(0, 6 * n);\n    func(arr);\n  }\n\n  //const massive=(n)=> {set}\n\n  /*действия выполняемые когда прокрутим до 6-го элемента */\n  function fetchMoreTask() {\n    if (taskMas.length >= countOfTask.current || taskSortMas.length >= countOfTask.current) {\n      setHasMoreTask(false);\n      return;\n    }\n    setCountPage(countPage + 1);\n    isSorted.current == 0 ? nextTaskMas(countPage + 1, task, setTaskMas) : nextTaskMas(countPage + 1, sortMas.current, setTaskSortMas);\n    //nextTaskMas(countPage+1)\n  }\n  ;\n\n  /*переход на стр Новая задача по клику */\n  function goToNewTask() {\n    navigate(\"/newTask/new\");\n  }\n\n  /*вывод списка всех заданий */\n  const AllTask = props => {\n    const arr = [];\n    if (props.allTask) {\n      props.allTask.map((str, id) => {\n        arr.push( /*#__PURE__*/_jsxDEV(AllTaskItem, {\n          id: id,\n          text: str.text,\n          header: str.header,\n          dateStart: str.fromDate,\n          dateEnd: str.endDate,\n          isDo: str.isDo\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 20\n        }, this));\n      });\n    }\n    return arr;\n  };\n\n  /*Открыть диалоговое окно */\n  const openDialog = event => {\n    delIdRef.current = event.currentTarget.id;\n    setOpen(true);\n  };\n\n  /*Закрытие диалогового окна без удаления задачи */\n  const dontDelTask = () => {\n    setOpen(false);\n  };\n\n  /*изменение флага Выполнена/Не выполнена задача */\n  function changeIsDo(event) {\n    const id = event.currentTarget.id;\n    if (isSorted.current == 0) {\n      dispatch(editIsDo({\n        'dateCreate': task[id].dateCreate\n      }));\n      task = store.getState().task.value;\n      nextTaskMas(countPage, task, setTaskMas);\n    } else {\n      const dateCreate = sortMas.current[id].dateCreate;\n      dispatch(editIsDo({\n        'dateCreate': sortMas.current[id].dateCreate\n      }));\n      task = store.getState().task.value;\n      let newList = [];\n      let idTask = 0;\n      task.map((val, ind) => {\n        if (val.dateCreate == dateCreate) idTask = ind;\n      });\n      newList = sortMas.current.map((val, ind) => {\n        if (val.dateCreate == dateCreate) {\n          return task[idTask];\n        }\n        return val;\n      });\n      nextTaskMas(countPage, newList, setTaskSortMas);\n    }\n\n    /*console.log('wwwwwwww');\n    console.log(newList);*/\n\n    /*setCountPage(1);\n      setHasMoreTask(true);\n     if(isSorted.current == 0) {\n      const id=event.currentTarget.id;\n      dispatch(editIsDo({'id': id}));\n       task=store.getState().task.value;\n      nextTaskMas(1,task,setTaskMas);\n    }\n    else {\n      let taskObj=task[id];\n      const newList = sortMas.current.map(o => {\n        if (o.header === taskObj.header) {\n          return taskObj;\n        }\n        return o;\n      });\n      sortMas.current=newList;\n      nextTaskMas(1,sortMas.current,setTaskSortMas)\n    //(isSorted.current == 0) ? nextTaskMas(1,task,setTaskMas) :  {nextTaskMas(1,sortMas.current,setTaskSortMas);}\n    }*/\n  }\n\n  /*Клик по кнопке \"Удалить\" - выводим диалоговое окно. Далее удаляем или нет в зависимости от выбора пользователя */\n  function deleteTask(event) {\n    //const id=event.currentTarget.id;\n    dispatch(delTask({\n      'id': delIdRef.current\n    }));\n    task = store.getState().task.value;\n    setCountPage(1);\n    isSorted.current = 0;\n    /*nextTaskMas(0); */\n    isSorted.current == 0 ? nextTaskMas(0, task, setTaskMas) : nextTaskMas(0, sortMas.current, setTaskSortMas);\n    dontDelTask();\n  }\n\n  /*Клик по кнопке \"Редактировать\" - переход на новую страницу и редактирование в ней задания */\n  function editTask(event) {\n    const id = event.currentTarget.id;\n    navigate(\"/newTask/\" + id);\n  }\n\n  /*отдельное задание */\n  const AllTaskItem = props => {\n    let dateStart_ = formatDate(props.dateStart);\n    let dateEnd_ = formatDate(props.dateEnd);\n    let a = 1;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"itemTask\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"textTaskDiv\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"headTask\",\n          children: props.header\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"textTask\",\n          children: props.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"divDate\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"\\u041D\\u0430\\u0447\\u0430\\u043B\\u043E: \", dateStart_]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"\\u041E\\u043A\\u043E\\u043D\\u0447\\u0430\\u043D\\u0438\\u0435: \", dateEnd_]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttonsTaskDiv\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: props.isDo,\n            onChange: changeIsDo,\n            id: props.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), \"\\u0412\\u044B\\u043F\\u043E\\u043B\\u043D\\u0435\\u043D\\u043E\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          id: props.id,\n          className: \"delEditButton\",\n          onClick: openDialog,\n          children: \"\\u0423\\u0434\\u0430\\u043B\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n          open: open,\n          onClose: dontDelTask,\n          \"aria-labelledby\": \"alert-dialog-title\",\n          \"aria-describedby\": \"alert-dialog-description\",\n          children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n            id: \"alert-dialog-title\",\n            children: \"Вы действительно хотите удалить задачу?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: dontDelTask,\n              children: \"\\u041D\\u0435\\u0442\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: deleteTask,\n              autoFocus: true,\n              children: \"\\u0414\\u0430\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"delEditButton\",\n          onClick: editTask,\n          id: props.id,\n          children: \"\\u0420\\u0415\\u0414\\u0410\\u041A\\u0422\\u0418\\u0420\\u041E\\u0412\\u0410\\u0422\\u042C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this);\n  };\n\n  /*вывод даты в нужном формате */\n  function formatDate(dat) {\n    const datDate = new Date(dat);\n    let monthNames = [\"янв\", \"фев\", \"март\", \"апр\", \"май\", \"июнь\", \"июль\", \"авг\", \"сент\", \"окт\", \"нояб\", \"декаб\"];\n    let mon = monthNames[datDate.getMonth()];\n    let newDate = `${datDate.getDate()} ${mon} ${datDate.getFullYear()}г`;\n    return newDate;\n  }\n\n  /*сотрировка по названию */\n  function sortHeader() {\n    let mas = task.slice();\n    mas.sort(function (a, b) {\n      if (a.header > b.header) {\n        return 1;\n      }\n      if (a.header < b.header) {\n        return -1;\n      }\n      return 0;\n    });\n\n    //setSortMas(mas);\n    sortMas.current = mas;\n    setCountPage(1);\n    isSorted.current = 1;\n    //nextTaskMas(1);\n    isSorted.current == 0 ? nextTaskMas(1, task, setTaskMas) : nextTaskMas(1, sortMas.current, setTaskSortMas);\n    setHasMoreTask(true);\n    setTaskMas([]);\n  }\n\n  /*сортировка по дате начала */\n  function sortDateStart() {\n    let mas = task.slice();\n    ;\n    mas.sort(function (a, b) {\n      if (new Date(a.fromDate) > new Date(b.fromDate)) {\n        return 1;\n      }\n      if (new Date(a.fromDate) < new Date(b.fromDate)) {\n        return -1;\n      }\n      return 0;\n    });\n\n    //setSortMas(mas);\n    sortMas.current = mas;\n    setCountPage(1);\n    isSorted.current = 1;\n    //nextTaskMas(1);\n    isSorted.current == 0 ? nextTaskMas(1, task, setTaskMas) : nextTaskMas(1, sortMas.current, setTaskSortMas);\n    setHasMoreTask(true);\n    setTaskMas([]);\n  }\n\n  /*сортировка по дате окончания */\n  function sortDateEnd() {\n    let mas = task.slice();\n    ;\n    mas.sort(function (a, b) {\n      if (new Date(a.endDate) > new Date(b.endDate)) {\n        return 1;\n      }\n      if (new Date(a.endDate) < new Date(b.endDate)) {\n        return -1;\n      }\n      return 0;\n    });\n\n    //setSortMas(mas);\n    sortMas.current = mas;\n    setCountPage(1);\n    isSorted.current = 1;\n    //nextTaskMas(1);\n    isSorted.current == 0 ? nextTaskMas(1, task, setTaskMas) : nextTaskMas(1, sortMas.current, setTaskSortMas);\n    setHasMoreTask(true);\n    setTaskMas([]);\n  }\n\n  /*при выборе пункта выпадающего списка делать сортировку */\n  function taskChangeSort(event) {\n    const id = event.target.value;\n    setSelectParamSort(id);\n    isSorted.current = 1;\n    switch (id) {\n      case '1':\n        {\n          sortHeader();\n          break;\n        }\n      case '2':\n        {\n          sortDateStart();\n          break;\n        }\n      case '3':\n        {\n          sortDateEnd();\n          break;\n        }\n      default:\n        {\n          break;\n        }\n    }\n  }\n\n  /*компонент выпадающий список для сортировки */\n  const SortDropDown = () => {\n    return /*#__PURE__*/_jsxDEV(\"select\", {\n      value: selectParamSort,\n      onChange: taskChangeSort,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"\",\n        disabled: true,\n        children: \"\\u041F\\u0430\\u0440\\u0430\\u043C\\u0435\\u0442\\u0440\\u044B \\u0441\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u043A\\u0438\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"1\",\n        children: \"\\u041F\\u043E \\u043D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u044E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"2\",\n        children: \"\\u041F\\u043E \\u0434\\u0430\\u0442\\u0435 \\u043D\\u0430\\u0447\\u0430\\u043B\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"3\",\n        children: \"\\u041F\\u043E \\u0434\\u0430\\u0442\\u0435 \\u043E\\u043A\\u043E\\u043D\\u0447\\u0430\\u043D\\u0438\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mainDiv\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"headerDiv\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"goToButton\",\n            onClick: goToNewTask,\n            children: \"\\u0421\\u043E\\u0437\\u0434\\u0430\\u0442\\u044C \\u043D\\u043E\\u0432\\u0443\\u044E \\u0437\\u0430\\u0434\\u0430\\u0447\\u0443\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(SortDropDown, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 14\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 12\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"arrayOfTask\",\n          children: task !== null && task !== undefined && JSON.stringify(task) !== '{}' && JSON.stringify(task) !== '[]' ? /*#__PURE__*/_jsxDEV(InfiniteScroll, {\n            dataLength: isSorted.current == 0 ? taskMas.length : taskSortMas.length,\n            next: fetchMoreTask,\n            hasMore: hasMoreTask,\n            endMessage: /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                textAlign: \"center\"\n              },\n              children: /*#__PURE__*/_jsxDEV(\"b\", {\n                children: \"\\u041A\\u043E\\u043D\\u0435\\u0446 \\u0441\\u043F\\u0438\\u0441\\u043A\\u0430\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 368,\n                columnNumber: 34\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 367,\n              columnNumber: 31\n            }, this),\n            children: /*#__PURE__*/_jsxDEV(AllTask, {\n              allTask: isSorted.current == 0 ? taskMas : taskSortMas\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"emptyTasks\",\n            children: \"\\u0421\\u043F\\u0438\\u0441\\u043E\\u043A \\u0437\\u0430\\u0434\\u0430\\u0447 \\u043F\\u0443\\u0441\\u0442\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 12\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 8\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 351,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"17TkSYPd1zHQY5NRjtCUaw6cEXw=\", false, function () {\n  return [useSelector, useDispatch, useNavigate];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useSelector","useDispatch","editIsDo","delTask","selectTask","NewTask","store","useNavigate","Button","Dialog","DialogActions","DialogTitle","InfiniteScroll","App","task","dispatch","navigate","open","setOpen","hasMoreTask","setHasMoreTask","countPage","setCountPage","selectParamSort","setSelectParamSort","delIdRef","countOfTask","length","isSorted","sortMas","taskMas","setTaskMas","taskSortMas","setTaskSortMas","nextTaskMas","n","array","func","arr","slice","fetchMoreTask","current","goToNewTask","AllTask","props","allTask","map","str","id","push","text","header","fromDate","endDate","isDo","openDialog","event","currentTarget","dontDelTask","changeIsDo","dateCreate","getState","value","newList","idTask","val","ind","deleteTask","editTask","AllTaskItem","dateStart_","formatDate","dateStart","dateEnd_","dateEnd","a","dat","datDate","Date","monthNames","mon","getMonth","newDate","getDate","getFullYear","sortHeader","mas","sort","b","sortDateStart","sortDateEnd","taskChangeSort","target","SortDropDown","undefined","JSON","stringify","textAlign"],"sources":["C:/Users/a.prokudina/Desktop/repos/testnumedy/testnumedy/src/App.js"],"sourcesContent":["\nimport React, { useState, useRef,useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {  editIsDo, delTask} from './app/taskSlice';\nimport { selectTask  } from './app/taskSlice';\nimport './App.css';\nimport NewTask from './NewTask';\nimport { store } from './app/store';\nimport {useNavigate} from \"react-router-dom\";\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\nfunction App() {\n\n  let task=useSelector(selectTask);//массив заданий из хранилища\n  const dispatch=useDispatch();\n  const navigate=useNavigate();\n  const [open, setOpen] = useState(false);//откр/закр окно диалога\n  const [hasMoreTask , setHasMoreTask] = useState(true);//есть ли еще стр для подгрузки при пагиниции\n  const [countPage , setCountPage] = useState(1);//номер подгруженной стр\n  const [selectParamSort , setSelectParamSort] = useState('');//параметр для сотрировки\n\n  const delIdRef = useRef(0);//номер задания для удаления\n  const countOfTask = useRef(task.length);//всего заданий\n  const isSorted = useRef(0);//была ли сортировка\n  const sortMas = useRef([]);\n\n  //const [sortMas , setSortMas] = useState([]);//массив из всех заданий после сортировки\n  const [taskMas , setTaskMas] = useState([]);//массив заданий, отображаемый в данный момент на экране с учетом пагинации. (сперва это 6 заданий потом при прокрутке он состоит из 12 заданий и тд) \n  const [taskSortMas , setTaskSortMas] = useState([]);//массив заданий, отображаемый в данный момент на экране с учетом пагинации ПОСЛЕ сортировки. \n\n  useEffect(()=>{ /*nextTaskMas(countPage,task)*/nextTaskMas(countPage,task,setTaskMas) },[]);\n\n  /*console.log('task=');\n  console.log(task);*/\n  /*console.log('taskmas=');\n  console.log(taskMas);*/\n  \n  /*console.log('sortTask=');\n  console.log(sortMas.current);\n  console.log('taskSortMas=');\n  console.log(taskSortMas);\n  console.log(hasMoreTask);*/\n\n\n  /*добавить в массив заданий, отображаемых на экране следующие 15 элементов. n- количество отображенных страниц */\n  function nextTaskMas(n,array,func){\n    /*if(isSorted.current == 0) {\n      let arr=task.slice(0, 6*n);\n      setTaskMas(arr);\n    }\n    else {\n      let arr=sortMas.current.slice(0, 6*n);\n      setTaskSortMas(arr);\n    }*/\n    let arr=array.slice(0, 6*n);\n      func(arr);\n    \n  }\n\n  //const massive=(n)=> {set}\n\n  /*действия выполняемые когда прокрутим до 6-го элемента */\n  function fetchMoreTask () {\n    if ((taskMas.length >= countOfTask.current) || (taskSortMas.length >= countOfTask.current)) {\n      setHasMoreTask(false);\n      return;\n    }\n\n    setCountPage(countPage+1);\n    (isSorted.current == 0) ? nextTaskMas(countPage+1,task,setTaskMas) : nextTaskMas(countPage+1,sortMas.current,setTaskSortMas);\n    //nextTaskMas(countPage+1)\n  };\n\n\n\n\n\n\n  /*переход на стр Новая задача по клику */\n  function goToNewTask() {\n    navigate(\"/newTask/new\")\n  }\n\n  /*вывод списка всех заданий */\n  const AllTask = (props) => {\n    const arr=[];\n\n    if(props.allTask) {\n      props.allTask.map((str,id) => { \n          arr.push(<AllTaskItem key={id} \n                                 id={id} \n                               text={str.text} \n                             header={str.header}\n                             dateStart={str.fromDate}\n                             dateEnd={str.endDate}\n                             isDo={str.isDo}/>)\n      })\n    }\n    \n    return arr;\n  }\n\n  /*Открыть диалоговое окно */\n  const openDialog = (event) => {\n     delIdRef.current=event.currentTarget.id;  setOpen(true);  };\n\n\n  /*Закрытие диалогового окна без удаления задачи */\n  const dontDelTask = () => { setOpen(false);  };\n\n\n\n\n  /*изменение флага Выполнена/Не выполнена задача */\n  function changeIsDo(event) {\n    const id=event.currentTarget.id; \n    \n    if(isSorted.current == 0) {\n      dispatch(editIsDo({'dateCreate': task[id].dateCreate}));\n      task=store.getState().task.value;\n      nextTaskMas(countPage,task,setTaskMas);\n    }\n    else {\n      const dateCreate = sortMas.current[id].dateCreate;\n      dispatch(editIsDo({'dateCreate': sortMas.current[id].dateCreate}));\n      task=store.getState().task.value;\n      let newList =[];\n      let idTask=0;\n     task.map((val,ind)=>{if(val.dateCreate == dateCreate) idTask=ind})\n     newList= sortMas.current.map((val,ind)=> {\n        if(val.dateCreate == dateCreate) \n        {return task[idTask]}\n        return val;\n      }\n      )\n      nextTaskMas(countPage,newList,setTaskSortMas)\n    }\n\n   \n    \n    /*console.log('wwwwwwww');\n    console.log(newList);*/\n\n    /*setCountPage(1);\n \n    setHasMoreTask(true);\n\n    if(isSorted.current == 0) {\n      const id=event.currentTarget.id;\n      dispatch(editIsDo({'id': id}));\n\n      task=store.getState().task.value;\n      nextTaskMas(1,task,setTaskMas);\n    }\n    else {\n      let taskObj=task[id];\n      const newList = sortMas.current.map(o => {\n        if (o.header === taskObj.header) {\n          return taskObj;\n        }\n        return o;\n      });\n      sortMas.current=newList;\n      nextTaskMas(1,sortMas.current,setTaskSortMas)\n    //(isSorted.current == 0) ? nextTaskMas(1,task,setTaskMas) :  {nextTaskMas(1,sortMas.current,setTaskSortMas);}\n    }*/\n\n  }\n\n\n\n\n\n\n\n  /*Клик по кнопке \"Удалить\" - выводим диалоговое окно. Далее удаляем или нет в зависимости от выбора пользователя */\n  function deleteTask(event){\n    //const id=event.currentTarget.id;\n    dispatch(delTask({'id': delIdRef.current}));\n    task=store.getState().task.value;\n\n    setCountPage(1);\n    isSorted.current=0;\n    /*nextTaskMas(0); */\n    (isSorted.current == 0) ? nextTaskMas(0,task,setTaskMas) : nextTaskMas(0,sortMas.current,setTaskSortMas);\n    dontDelTask();\n  }\n\n  /*Клик по кнопке \"Редактировать\" - переход на новую страницу и редактирование в ней задания */\n  function editTask(event){\n    const id=event.currentTarget.id;\n    navigate(\"/newTask/\"+id);\n  }\n\n  /*отдельное задание */\n  const AllTaskItem = (props) => {\n    let dateStart_ = formatDate(props.dateStart) ;\n    let dateEnd_ = formatDate(props.dateEnd);\n    let a=1;\n\n    return(\n      <div className='itemTask'>\n        <div className='textTaskDiv'>\n          <div className='headTask'>{props.header}</div>\n          <div className='textTask'>{props.text}</div>\n          <div className='divDate'>\n            <span>Начало: {dateStart_}</span>\n            <span>Окончание: {dateEnd_}</span>\n          </div>\n        </div>\n        <div className='buttonsTaskDiv'>\n          <label>\n            <input type='checkbox' checked={props.isDo} onChange={changeIsDo} id={props.id}/>\n            Выполнено\n          </label>\n            <Button id={props.id} className='delEditButton' onClick={openDialog}>Удалить</Button>\n              <Dialog\n                open={open}\n                onClose={dontDelTask}\n                aria-labelledby=\"alert-dialog-title\"\n                aria-describedby=\"alert-dialog-description\"\n              >\n                <DialogTitle id=\"alert-dialog-title\">\n                  {\"Вы действительно хотите удалить задачу?\"}\n                </DialogTitle>\n                <DialogActions>\n                  <Button onClick={dontDelTask}>Нет</Button>\n                  <Button onClick={deleteTask} autoFocus>Да</Button>\n                </DialogActions>\n              </Dialog>\n\n            <button className='delEditButton' onClick={editTask} id={props.id}>РЕДАКТИРОВАТЬ</button>\n\n        </div>\n\n      </div>);\n  }\n\n  /*вывод даты в нужном формате */\n  function formatDate(dat){\n\n    const datDate = new Date(dat);\n    let monthNames= [ \"янв\", \"фев\", \"март\", \"апр\", \"май\", \"июнь\",\"июль\", \"авг\", \"сент\", \"окт\", \"нояб\", \"декаб\"];\n    let mon=monthNames[datDate.getMonth()];\n    let newDate = `${datDate.getDate()} ${mon} ${datDate.getFullYear()}г`;\n    \n    return newDate;\n  }\n\n  /*сотрировка по названию */\n  function sortHeader(){\n    let mas=task.slice();\n    mas.sort(function (a, b) { \n      if (a.header > b.header) {\n        return 1;\n      }\n      if (a.header < b.header) {\n        return -1;\n      }\n      return 0;\n    })\n    \n    //setSortMas(mas);\n    sortMas.current=mas;\n    setCountPage(1);\n    isSorted.current=1;\n    //nextTaskMas(1);\n    (isSorted.current == 0) ? nextTaskMas(1,task,setTaskMas) : nextTaskMas(1,sortMas.current,setTaskSortMas);\n    setHasMoreTask(true);\n    setTaskMas([]);\n  }\n\n  /*сортировка по дате начала */\n  function sortDateStart(){\n    let mas=task.slice();;\n    mas.sort(function (a, b) { \n      if (new Date(a.fromDate) > new Date(b.fromDate)) {\n        return 1;\n      }\n      if (new Date(a.fromDate) < new Date(b.fromDate)) {\n        return -1;\n      }\n      return 0;\n    })\n\n    //setSortMas(mas);\n    sortMas.current=mas;\n    setCountPage(1);\n    isSorted.current=1;\n    //nextTaskMas(1);\n    (isSorted.current == 0) ? nextTaskMas(1,task,setTaskMas) : nextTaskMas(1,sortMas.current,setTaskSortMas);\n    setHasMoreTask(true);\n    setTaskMas([]);\n  }\n\n  /*сортировка по дате окончания */\n  function sortDateEnd(){\n    let mas=task.slice();;\n    mas.sort(function (a, b) { \n      if (new Date(a.endDate) > new Date(b.endDate)) {\n        return 1;\n      }\n      if (new Date(a.endDate) < new Date(b.endDate)) {\n        return -1;\n      }\n      return 0;\n    })\n\n    //setSortMas(mas);\n    sortMas.current=mas;\n    setCountPage(1);\n    isSorted.current=1;\n    //nextTaskMas(1);\n    (isSorted.current == 0) ? nextTaskMas(1,task,setTaskMas) : nextTaskMas(1,sortMas.current,setTaskSortMas);\n    setHasMoreTask(true);\n    setTaskMas([]);\n  }\n\n  /*при выборе пункта выпадающего списка делать сортировку */\n  function taskChangeSort(event){\n    const id=event.target.value;\n    setSelectParamSort(id);\n    isSorted.current=1;\n\n    switch(id) {\n      case '1' : { sortHeader(); break;  }\n      case '2' : { sortDateStart(); break;  }\n      case '3' : { sortDateEnd(); break;  }\n      default: { break; }\n    }\n    \n  }\n\n  /*компонент выпадающий список для сортировки */\n  const SortDropDown = () => {\n    return(\n      <select value={selectParamSort} onChange={taskChangeSort}>\n        <option value='' disabled>Параметры сортировки</option>\n        <option value='1'>По названию</option>\n        <option value='2'>По дате начала</option>\n        <option value='3'>По дате окончания</option>\n      </select>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n       <div className='mainDiv'>\n           <div className='headerDiv'>\n             <button className='goToButton' onClick={goToNewTask}>Создать новую задачу</button>\n             <SortDropDown/>\n           </div>\n           \n           <div className='arrayOfTask'>\n           { \n            ((task!==null) && (task!==undefined) && (JSON.stringify(task)!=='{}') && (JSON.stringify(task)!=='[]')) ? \n            <InfiniteScroll\n                  dataLength={(isSorted.current == 0) ? taskMas.length : taskSortMas.length}\n                  next={fetchMoreTask}\n                  hasMore={hasMoreTask}\n                  endMessage={\n                              <p style={{ textAlign: \"center\" }}>\n                                 <b>Конец списка</b>\n                              </p>\n                  } >\n                <AllTask allTask={(isSorted.current == 0) ? taskMas : taskSortMas}/>  \n            </InfiniteScroll>\n              :\n              <div className='emptyTasks'>Список задач пуст</div>\n           }\n           </div>\n       </div>\n      </header>\n    </div>\n  )\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}